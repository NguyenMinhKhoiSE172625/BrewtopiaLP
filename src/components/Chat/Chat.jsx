import React, { useState, useEffect } from 'react';
import UsersList from '../UsersList/UsersList';
import ChatRoom from '../ChatRoom/ChatRoom';
import chatService from '../../services/chatService';
import socketService from '../../services/socketService';
import './Chat.css';

const Chat = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [chatRoom, setChatRoom] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    // L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ localStorage
    const userData = JSON.parse(localStorage.getItem('userData'));
    if (userData && userData.user) {
      setCurrentUser(userData.user);
      // Set user info cho socket service
      socketService.setCurrentUser(userData.user._id);
    }

    // K·∫øt n·ªëi socket khi component mount
    socketService.connect();

    return () => {
      // Cleanup khi component unmount
      socketService.disconnect();
    };
  }, []);

  const handleUserSelect = async (user) => {
    if (!currentUser) {
      setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i');
      return;
    }
    setLoading(true);
    setError(null);
    setSelectedUser(user);
    try {
      // Log d·ªØ li·ªáu g·ª≠i l√™n
      console.log('üîç G·ª≠i participants:', [user._id], 'name:', user.name);
      // T·∫°o ph√≤ng chat v·ªõi user ƒë∆∞·ª£c ch·ªçn (ch·ªâ truy·ªÅn user._id)
      const response = await chatService.createChatRoom(
        [user._id],
        false,
        user.name
      );
      // L·∫•y ƒë√∫ng d·ªØ li·ªáu ph√≤ng chat
      let chatRoomData = response;
      if (response.room) {
        chatRoomData = response.room;
      }
      // Log d·ªØ li·ªáu nh·∫≠n v·ªÅ
      console.log('üîç Chat room data:', chatRoomData);
      // ƒê·∫£m b·∫£o participants l√† object user
      if (chatRoomData && chatRoomData.participants) {
        const fullParticipants = chatRoomData.participants.map(participant => {
          if (typeof participant === 'string') {
            if (participant === user._id) return user;
            else if (participant === currentUser._id) return currentUser;
            return { _id: participant, name: 'Unknown User' };
          }
          return participant;
        });
        chatRoomData.participants = fullParticipants;
      } else {
        chatRoomData.participants = [currentUser, user];
      }
      setChatRoom(chatRoomData);
    } catch (err) {
      // Log l·ªói chi ti·∫øt
      console.error('‚ùå L·ªói t·∫°o ph√≤ng chat:', err);
      setError('Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t√¨m ph√≤ng chat');
    } finally {
      setLoading(false);
    }
  };

  const handleBackToUsersList = () => {
    setSelectedUser(null);
    setChatRoom(null);
    setError(null);
  };

  if (!currentUser) {
    return (
      <div className="chat-container">
        <div className="chat-error">
          <h3>‚ùå L·ªói x√°c th·ª±c</h3>
          <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="chat-container">
      {loading && (
        <div className="chat-loading-overlay">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫°o ph√≤ng chat...</p>
        </div>
      )}

      {error && (
        <div className="chat-error-banner">
          <span>‚ùå {error}</span>
          <button onClick={() => setError(null)} className="close-error-btn">
            ‚úï
          </button>
        </div>
      )}

      <div className="chat-content">
        {!selectedUser ? (
          <UsersList 
            onUserSelect={handleUserSelect}
            currentUserId={currentUser._id}
          />
        ) : (
          chatRoom && (
            <ChatRoom
              chatRoom={chatRoom}
              currentUser={currentUser}
              onBack={handleBackToUsersList}
            />
          )
        )}
      </div>
    </div>
  );
};

export default Chat;
