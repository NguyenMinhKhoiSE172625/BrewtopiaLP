import apiService from './apiService';

class ChatService {
  constructor() {
    this.roomCache = new Map(); // Cache rooms ƒë·ªÉ tr√°nh duplicate
  }

  // Fallback demo users ƒë·ªÉ d√πng khi API kh√¥ng available
  getDemoUsers() {
    return [
      { _id: 'demo1', name: 'Demo User 1', email: 'demo1@example.com' },
      { _id: 'demo2', name: 'Demo User 2', email: 'demo2@example.com' },
      { _id: 'demo3', name: 'Demo User 3', email: 'demo3@example.com' }
    ];
  }
  // L·∫•y danh s√°ch users
  async getUsers() {
    try {
      console.log('üîÑ Fetching users from API...');
      const data = await apiService.getUsers();
      
      console.log('‚úÖ Real users loaded:', data.length, 'users');
      console.log('üë• Users:', data.map(u => ({ id: u._id, name: u.name })));

      // Cache users ƒë·ªÉ d√πng cho demo room
      this.cachedUsers = data;

      return data;
    } catch (error) {
      console.error('‚ùå Error fetching users:', error);
      console.warn('üîÑ Fallback to demo users');
      return this.getDemoUsers();
    }
  }

  // T·∫°o ph√≤ng chat (ho·∫∑c t√¨m room ƒë√£ t·ªìn t·∫°i)
  async createChatRoom(participants, isGroupChat = false, name = '') {
    try {
      // Ch·ªâ truy·ªÅn ƒë√∫ng participants l√† userId c·ªßa ng∆∞·ªùi mu·ªën chat
      const cacheKey = participants.sort().join('_');
      if (this.roomCache.has(cacheKey)) {
        console.log('‚úÖ S·ª≠ d·ª•ng cached room cho:', participants);
        return this.roomCache.get(cacheKey);
      }

      console.log('üîç [API] POST /chat/room', { participants, isGroupChat, name });
      const data = await apiService.createChatRoom(participants, isGroupChat, name);
      
      console.log('‚úÖ Room created/found:', data);
      
      this.roomCache.set(cacheKey, data);
      return data;
    } catch (error) {
      console.error('‚ùå createChatRoom error:', error);
      // Re-throw v·ªõi th√¥ng tin chi ti·∫øt h∆°n
      throw new Error(`L·ªói t·∫°o ph√≤ng chat: ${error.message}`);
    }
  }

  // L·∫•y danh s√°ch ph√≤ng chat c·ªßa user
  async getChatRooms(userId) {
    try {
      const data = await apiService.getChatRooms(userId);
      return data;
    } catch (error) {
      console.error('Error fetching chat rooms:', error);
      throw error;
    }
  }

  // L·∫•y tin nh·∫Øn trong ph√≤ng chat
  // eslint-disable-next-line no-unused-vars
  async getChatMessages(chatId, page = 1, limit = 50) {
    try {
      const data = await apiService.getChatMessages(chatId);
      return data;
    } catch (error) {
      console.warn('Chat messages API not available, starting with empty chat:', error.message);
      // Tr·∫£ v·ªÅ empty messages thay v√¨ throw error
      return { messages: [] };
    }
  }

  // G·ª≠i tin nh·∫Øn (ch·ªâ qua socket - backend s·∫Ω t·ª± l∆∞u v√†o database)  
  // eslint-disable-next-line no-unused-vars
  async sendMessage(chatId, senderId, message) {
    console.log('üí¨ Sending message via socket only (no API call)');

    // Ch·ªâ g·ª≠i qua socket, backend s·∫Ω t·ª± l∆∞u v√†o database
    // Kh√¥ng c·∫ßn g·ªçi API n·ªØa v√¨ backend socket ƒë√£ handle vi·ªác l∆∞u
    return { success: true, socketOnly: true };
  }
}

// T·∫°o instance duy nh·∫•t
const chatService = new ChatService();
export default chatService;
